// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Allen-Career-Institute/test-and-assessment-commons/pkg/data/entity"
	data_filters "github.com/Allen-Career-Institute/test-and-assessment-commons/pkg/data/mongodb/data_filters"

	mock "github.com/stretchr/testify/mock"
)

// IStudentTestOverviewRepository is an autogenerated mock type for the IStudentTestOverviewRepository type
type IStudentTestOverviewRepository struct {
	mock.Mock
}

type IStudentTestOverviewRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IStudentTestOverviewRepository) EXPECT() *IStudentTestOverviewRepository_Expecter {
	return &IStudentTestOverviewRepository_Expecter{mock: &_m.Mock}
}

// CreateStudentTest provides a mock function with given fields: ctx, studentTestInput
func (_m *IStudentTestOverviewRepository) CreateStudentTest(ctx context.Context, studentTestInput entity.StudentTestOverviewEntity) error {
	ret := _m.Called(ctx, studentTestInput)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.StudentTestOverviewEntity) error); ok {
		r0 = rf(ctx, studentTestInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IStudentTestOverviewRepository_CreateStudentTest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStudentTest'
type IStudentTestOverviewRepository_CreateStudentTest_Call struct {
	*mock.Call
}

// CreateStudentTest is a helper method to define mock.On call
//   - ctx context.Context
//   - studentTestInput entity.StudentTestOverviewEntity
func (_e *IStudentTestOverviewRepository_Expecter) CreateStudentTest(ctx interface{}, studentTestInput interface{}) *IStudentTestOverviewRepository_CreateStudentTest_Call {
	return &IStudentTestOverviewRepository_CreateStudentTest_Call{Call: _e.mock.On("CreateStudentTest", ctx, studentTestInput)}
}

func (_c *IStudentTestOverviewRepository_CreateStudentTest_Call) Run(run func(ctx context.Context, studentTestInput entity.StudentTestOverviewEntity)) *IStudentTestOverviewRepository_CreateStudentTest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.StudentTestOverviewEntity))
	})
	return _c
}

func (_c *IStudentTestOverviewRepository_CreateStudentTest_Call) Return(_a0 error) *IStudentTestOverviewRepository_CreateStudentTest_Call {
	_c.Call.Return(_a0)
	return _c
}

// FetchAllTestsByFilters provides a mock function with given fields: ctx, studentTestFilter
func (_m *IStudentTestOverviewRepository) FetchAllTestsByFilters(ctx context.Context, studentTestFilter data_filters.StudentTestFilter) ([]*entity.StudentTestOverviewEntity, error) {
	ret := _m.Called(ctx, studentTestFilter)

	var r0 []*entity.StudentTestOverviewEntity
	if rf, ok := ret.Get(0).(func(context.Context, data_filters.StudentTestFilter) []*entity.StudentTestOverviewEntity); ok {
		r0 = rf(ctx, studentTestFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.StudentTestOverviewEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, data_filters.StudentTestFilter) error); ok {
		r1 = rf(ctx, studentTestFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentTestOverviewRepository_FetchAllTestsByFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchAllTestsByFilters'
type IStudentTestOverviewRepository_FetchAllTestsByFilters_Call struct {
	*mock.Call
}

// FetchAllTestsByFilters is a helper method to define mock.On call
//   - ctx context.Context
//   - studentTestFilter data_filters.StudentTestFilter
func (_e *IStudentTestOverviewRepository_Expecter) FetchAllTestsByFilters(ctx interface{}, studentTestFilter interface{}) *IStudentTestOverviewRepository_FetchAllTestsByFilters_Call {
	return &IStudentTestOverviewRepository_FetchAllTestsByFilters_Call{Call: _e.mock.On("FetchAllTestsByFilters", ctx, studentTestFilter)}
}

func (_c *IStudentTestOverviewRepository_FetchAllTestsByFilters_Call) Run(run func(ctx context.Context, studentTestFilter data_filters.StudentTestFilter)) *IStudentTestOverviewRepository_FetchAllTestsByFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(data_filters.StudentTestFilter))
	})
	return _c
}

func (_c *IStudentTestOverviewRepository_FetchAllTestsByFilters_Call) Return(_a0 []*entity.StudentTestOverviewEntity, _a1 error) *IStudentTestOverviewRepository_FetchAllTestsByFilters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FetchTestsByFilters provides a mock function with given fields: ctx, studentTestFilter
func (_m *IStudentTestOverviewRepository) FetchTestsByFilters(ctx context.Context, studentTestFilter data_filters.StudentTestFilter) ([]*entity.StudentTestOverviewEntity, error) {
	ret := _m.Called(ctx, studentTestFilter)

	var r0 []*entity.StudentTestOverviewEntity
	if rf, ok := ret.Get(0).(func(context.Context, data_filters.StudentTestFilter) []*entity.StudentTestOverviewEntity); ok {
		r0 = rf(ctx, studentTestFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.StudentTestOverviewEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, data_filters.StudentTestFilter) error); ok {
		r1 = rf(ctx, studentTestFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentTestOverviewRepository_FetchTestsByFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchTestsByFilters'
type IStudentTestOverviewRepository_FetchTestsByFilters_Call struct {
	*mock.Call
}

// FetchTestsByFilters is a helper method to define mock.On call
//   - ctx context.Context
//   - studentTestFilter data_filters.StudentTestFilter
func (_e *IStudentTestOverviewRepository_Expecter) FetchTestsByFilters(ctx interface{}, studentTestFilter interface{}) *IStudentTestOverviewRepository_FetchTestsByFilters_Call {
	return &IStudentTestOverviewRepository_FetchTestsByFilters_Call{Call: _e.mock.On("FetchTestsByFilters", ctx, studentTestFilter)}
}

func (_c *IStudentTestOverviewRepository_FetchTestsByFilters_Call) Run(run func(ctx context.Context, studentTestFilter data_filters.StudentTestFilter)) *IStudentTestOverviewRepository_FetchTestsByFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(data_filters.StudentTestFilter))
	})
	return _c
}

func (_c *IStudentTestOverviewRepository_FetchTestsByFilters_Call) Return(_a0 []*entity.StudentTestOverviewEntity, _a1 error) *IStudentTestOverviewRepository_FetchTestsByFilters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindByStudentIDTestID provides a mock function with given fields: ctx, studentID, testID
func (_m *IStudentTestOverviewRepository) FindByStudentIDTestID(ctx context.Context, studentID string, testID string) (*entity.StudentTestOverviewEntity, error) {
	ret := _m.Called(ctx, studentID, testID)

	var r0 *entity.StudentTestOverviewEntity
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.StudentTestOverviewEntity); ok {
		r0 = rf(ctx, studentID, testID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.StudentTestOverviewEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, studentID, testID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentTestOverviewRepository_FindByStudentIDTestID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByStudentIDTestID'
type IStudentTestOverviewRepository_FindByStudentIDTestID_Call struct {
	*mock.Call
}

// FindByStudentIDTestID is a helper method to define mock.On call
//   - ctx context.Context
//   - studentID string
//   - testID string
func (_e *IStudentTestOverviewRepository_Expecter) FindByStudentIDTestID(ctx interface{}, studentID interface{}, testID interface{}) *IStudentTestOverviewRepository_FindByStudentIDTestID_Call {
	return &IStudentTestOverviewRepository_FindByStudentIDTestID_Call{Call: _e.mock.On("FindByStudentIDTestID", ctx, studentID, testID)}
}

func (_c *IStudentTestOverviewRepository_FindByStudentIDTestID_Call) Run(run func(ctx context.Context, studentID string, testID string)) *IStudentTestOverviewRepository_FindByStudentIDTestID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *IStudentTestOverviewRepository_FindByStudentIDTestID_Call) Return(_a0 *entity.StudentTestOverviewEntity, _a1 error) *IStudentTestOverviewRepository_FindByStudentIDTestID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindByTestStudentIDTestID provides a mock function with given fields: ctx, studentID, testID
func (_m *IStudentTestOverviewRepository) FindByTestStudentIDTestID(ctx context.Context, studentID string, testID string) (*entity.StudentTestOverviewEntity, error) {
	ret := _m.Called(ctx, studentID, testID)

	var r0 *entity.StudentTestOverviewEntity
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.StudentTestOverviewEntity); ok {
		r0 = rf(ctx, studentID, testID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.StudentTestOverviewEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, studentID, testID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentTestOverviewRepository_FindByTestStudentIDTestID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByTestStudentIDTestID'
type IStudentTestOverviewRepository_FindByTestStudentIDTestID_Call struct {
	*mock.Call
}

// FindByTestStudentIDTestID is a helper method to define mock.On call
//   - ctx context.Context
//   - studentID string
//   - testID string
func (_e *IStudentTestOverviewRepository_Expecter) FindByTestStudentIDTestID(ctx interface{}, studentID interface{}, testID interface{}) *IStudentTestOverviewRepository_FindByTestStudentIDTestID_Call {
	return &IStudentTestOverviewRepository_FindByTestStudentIDTestID_Call{Call: _e.mock.On("FindByTestStudentIDTestID", ctx, studentID, testID)}
}

func (_c *IStudentTestOverviewRepository_FindByTestStudentIDTestID_Call) Run(run func(ctx context.Context, studentID string, testID string)) *IStudentTestOverviewRepository_FindByTestStudentIDTestID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *IStudentTestOverviewRepository_FindByTestStudentIDTestID_Call) Return(_a0 *entity.StudentTestOverviewEntity, _a1 error) *IStudentTestOverviewRepository_FindByTestStudentIDTestID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateStudentTest provides a mock function with given fields: ctx, studentTestOverviewEntity
func (_m *IStudentTestOverviewRepository) UpdateStudentTest(ctx context.Context, studentTestOverviewEntity *entity.StudentTestOverviewEntity) (*entity.StudentTestOverviewEntity, error) {
	ret := _m.Called(ctx, studentTestOverviewEntity)

	var r0 *entity.StudentTestOverviewEntity
	if rf, ok := ret.Get(0).(func(context.Context, *entity.StudentTestOverviewEntity) *entity.StudentTestOverviewEntity); ok {
		r0 = rf(ctx, studentTestOverviewEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.StudentTestOverviewEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.StudentTestOverviewEntity) error); ok {
		r1 = rf(ctx, studentTestOverviewEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentTestOverviewRepository_UpdateStudentTest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStudentTest'
type IStudentTestOverviewRepository_UpdateStudentTest_Call struct {
	*mock.Call
}

// UpdateStudentTest is a helper method to define mock.On call
//   - ctx context.Context
//   - studentTestOverviewEntity *entity.StudentTestOverviewEntity
func (_e *IStudentTestOverviewRepository_Expecter) UpdateStudentTest(ctx interface{}, studentTestOverviewEntity interface{}) *IStudentTestOverviewRepository_UpdateStudentTest_Call {
	return &IStudentTestOverviewRepository_UpdateStudentTest_Call{Call: _e.mock.On("UpdateStudentTest", ctx, studentTestOverviewEntity)}
}

func (_c *IStudentTestOverviewRepository_UpdateStudentTest_Call) Run(run func(ctx context.Context, studentTestOverviewEntity *entity.StudentTestOverviewEntity)) *IStudentTestOverviewRepository_UpdateStudentTest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.StudentTestOverviewEntity))
	})
	return _c
}

func (_c *IStudentTestOverviewRepository_UpdateStudentTest_Call) Return(_a0 *entity.StudentTestOverviewEntity, _a1 error) *IStudentTestOverviewRepository_UpdateStudentTest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateStudentTestStatus provides a mock function with given fields: ctx, testID, studentID, status
func (_m *IStudentTestOverviewRepository) UpdateStudentTestStatus(ctx context.Context, testID string, studentID string, status string) error {
	ret := _m.Called(ctx, testID, studentID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, testID, studentID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IStudentTestOverviewRepository_UpdateStudentTestStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStudentTestStatus'
type IStudentTestOverviewRepository_UpdateStudentTestStatus_Call struct {
	*mock.Call
}

// UpdateStudentTestStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - testID string
//   - studentID string
//   - status string
func (_e *IStudentTestOverviewRepository_Expecter) UpdateStudentTestStatus(ctx interface{}, testID interface{}, studentID interface{}, status interface{}) *IStudentTestOverviewRepository_UpdateStudentTestStatus_Call {
	return &IStudentTestOverviewRepository_UpdateStudentTestStatus_Call{Call: _e.mock.On("UpdateStudentTestStatus", ctx, testID, studentID, status)}
}

func (_c *IStudentTestOverviewRepository_UpdateStudentTestStatus_Call) Run(run func(ctx context.Context, testID string, studentID string, status string)) *IStudentTestOverviewRepository_UpdateStudentTestStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *IStudentTestOverviewRepository_UpdateStudentTestStatus_Call) Return(_a0 error) *IStudentTestOverviewRepository_UpdateStudentTestStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewIStudentTestOverviewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIStudentTestOverviewRepository creates a new instance of IStudentTestOverviewRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIStudentTestOverviewRepository(t mockConstructorTestingTNewIStudentTestOverviewRepository) *IStudentTestOverviewRepository {
	mock := &IStudentTestOverviewRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
