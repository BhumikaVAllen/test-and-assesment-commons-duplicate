// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ddb "github.com/Allen-Career-Institute/test-and-assessment-commons/pkg/data/ddb"
	mock "github.com/stretchr/testify/mock"
)

// BaseRepository is an autogenerated mock type for the BaseRepository type
type BaseRepository[T interface{}, K ddb.Key, O ddb.Offset] struct {
	mock.Mock
}

type BaseRepository_Expecter[T interface{}, K ddb.Key, O ddb.Offset] struct {
	mock *mock.Mock
}

func (_m *BaseRepository[T, K, O]) EXPECT() *BaseRepository_Expecter[T, K, O] {
	return &BaseRepository_Expecter[T, K, O]{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, e
func (_m *BaseRepository[T, K, O]) Create(ctx context.Context, e *T) error {
	ret := _m.Called(ctx, e)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *T) error); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BaseRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type BaseRepository_Create_Call[T interface{}, K ddb.Key, O ddb.Offset] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - e *T
func (_e *BaseRepository_Expecter[T, K, O]) Create(ctx interface{}, e interface{}) *BaseRepository_Create_Call[T, K, O] {
	return &BaseRepository_Create_Call[T, K, O]{Call: _e.mock.On("Create", ctx, e)}
}

func (_c *BaseRepository_Create_Call[T, K, O]) Run(run func(ctx context.Context, e *T)) *BaseRepository_Create_Call[T, K, O] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*T))
	})
	return _c
}

func (_c *BaseRepository_Create_Call[T, K, O]) Return(_a0 error) *BaseRepository_Create_Call[T, K, O] {
	_c.Call.Return(_a0)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *BaseRepository[T, K, O]) FindByID(ctx context.Context, id K) (*T, error) {
	ret := _m.Called(ctx, id)

	var r0 *T
	if rf, ok := ret.Get(0).(func(context.Context, K) *T); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, K) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BaseRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type BaseRepository_FindByID_Call[T interface{}, K ddb.Key, O ddb.Offset] struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id K
func (_e *BaseRepository_Expecter[T, K, O]) FindByID(ctx interface{}, id interface{}) *BaseRepository_FindByID_Call[T, K, O] {
	return &BaseRepository_FindByID_Call[T, K, O]{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *BaseRepository_FindByID_Call[T, K, O]) Run(run func(ctx context.Context, id K)) *BaseRepository_FindByID_Call[T, K, O] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(K))
	})
	return _c
}

func (_c *BaseRepository_FindByID_Call[T, K, O]) Return(_a0 *T, _a1 error) *BaseRepository_FindByID_Call[T, K, O] {
	_c.Call.Return(_a0, _a1)
	return _c
}

// List provides a mock function with given fields: ctx, offset, limit
func (_m *BaseRepository[T, K, O]) List(ctx context.Context, offset O, limit int) ([]*T, error) {
	ret := _m.Called(ctx, offset, limit)

	var r0 []*T
	if rf, ok := ret.Get(0).(func(context.Context, O, int) []*T); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, O, int) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BaseRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type BaseRepository_List_Call[T interface{}, K ddb.Key, O ddb.Offset] struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - offset O
//   - limit int
func (_e *BaseRepository_Expecter[T, K, O]) List(ctx interface{}, offset interface{}, limit interface{}) *BaseRepository_List_Call[T, K, O] {
	return &BaseRepository_List_Call[T, K, O]{Call: _e.mock.On("List", ctx, offset, limit)}
}

func (_c *BaseRepository_List_Call[T, K, O]) Run(run func(ctx context.Context, offset O, limit int)) *BaseRepository_List_Call[T, K, O] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(O), args[2].(int))
	})
	return _c
}

func (_c *BaseRepository_List_Call[T, K, O]) Return(_a0 []*T, _a1 error) *BaseRepository_List_Call[T, K, O] {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: ctx, e
func (_m *BaseRepository[T, K, O]) Update(ctx context.Context, e *T) (*T, error) {
	ret := _m.Called(ctx, e)

	var r0 *T
	if rf, ok := ret.Get(0).(func(context.Context, *T) *T); ok {
		r0 = rf(ctx, e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *T) error); ok {
		r1 = rf(ctx, e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BaseRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type BaseRepository_Update_Call[T interface{}, K ddb.Key, O ddb.Offset] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - e *T
func (_e *BaseRepository_Expecter[T, K, O]) Update(ctx interface{}, e interface{}) *BaseRepository_Update_Call[T, K, O] {
	return &BaseRepository_Update_Call[T, K, O]{Call: _e.mock.On("Update", ctx, e)}
}

func (_c *BaseRepository_Update_Call[T, K, O]) Run(run func(ctx context.Context, e *T)) *BaseRepository_Update_Call[T, K, O] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*T))
	})
	return _c
}

func (_c *BaseRepository_Update_Call[T, K, O]) Return(_a0 *T, _a1 error) *BaseRepository_Update_Call[T, K, O] {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewBaseRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBaseRepository creates a new instance of BaseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBaseRepository[T interface{}, K ddb.Key, O ddb.Offset](t mockConstructorTestingTNewBaseRepository) *BaseRepository[T, K, O] {
	mock := &BaseRepository[T, K, O]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
