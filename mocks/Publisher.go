// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import (
	event "github.com/Allen-Career-Institute/test-and-assessment-commons/pkg/publisher/event"
	mock "github.com/stretchr/testify/mock"
)

// Publisher is an autogenerated mock type for the Publisher type
type Publisher struct {
	mock.Mock
}

type Publisher_Expecter struct {
	mock *mock.Mock
}

func (_m *Publisher) EXPECT() *Publisher_Expecter {
	return &Publisher_Expecter{mock: &_m.Mock}
}

// PublishEvent provides a mock function with given fields: message
func (_m *Publisher) PublishEvent(message event.Event) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(event.Event) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publisher_PublishEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishEvent'
type Publisher_PublishEvent_Call struct {
	*mock.Call
}

// PublishEvent is a helper method to define mock.On call
//   - message event.Event
func (_e *Publisher_Expecter) PublishEvent(message interface{}) *Publisher_PublishEvent_Call {
	return &Publisher_PublishEvent_Call{Call: _e.mock.On("PublishEvent", message)}
}

func (_c *Publisher_PublishEvent_Call) Run(run func(message event.Event)) *Publisher_PublishEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(event.Event))
	})
	return _c
}

func (_c *Publisher_PublishEvent_Call) Return(_a0 error) *Publisher_PublishEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewPublisher interface {
	mock.TestingT
	Cleanup(func())
}

// NewPublisher creates a new instance of Publisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPublisher(t mockConstructorTestingTNewPublisher) *Publisher {
	mock := &Publisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
