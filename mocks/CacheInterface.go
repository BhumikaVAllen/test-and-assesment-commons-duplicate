// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// CacheInterface is an autogenerated mock type for the CacheInterface type
type CacheInterface struct {
	mock.Mock
}

type CacheInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheInterface) EXPECT() *CacheInterface_Expecter {
	return &CacheInterface_Expecter{mock: &_m.Mock}
}

// DecrementValue provides a mock function with given fields: ctx, key
func (_m *CacheInterface) DecrementValue(ctx context.Context, key string) int64 {
	ret := _m.Called(ctx, key)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// CacheInterface_DecrementValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecrementValue'
type CacheInterface_DecrementValue_Call struct {
	*mock.Call
}

// DecrementValue is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *CacheInterface_Expecter) DecrementValue(ctx interface{}, key interface{}) *CacheInterface_DecrementValue_Call {
	return &CacheInterface_DecrementValue_Call{Call: _e.mock.On("DecrementValue", ctx, key)}
}

func (_c *CacheInterface_DecrementValue_Call) Run(run func(ctx context.Context, key string)) *CacheInterface_DecrementValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CacheInterface_DecrementValue_Call) Return(_a0 int64) *CacheInterface_DecrementValue_Call {
	_c.Call.Return(_a0)
	return _c
}

// Delete provides a mock function with given fields: ctx, keys
func (_m *CacheInterface) Delete(ctx context.Context, keys ...string) error {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) error); ok {
		r0 = rf(ctx, keys...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type CacheInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *CacheInterface_Expecter) Delete(ctx interface{}, keys ...interface{}) *CacheInterface_Delete_Call {
	return &CacheInterface_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *CacheInterface_Delete_Call) Run(run func(ctx context.Context, keys ...string)) *CacheInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *CacheInterface_Delete_Call) Return(_a0 error) *CacheInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// ExpireKey provides a mock function with given fields: ctx, key, ttl
func (_m *CacheInterface) ExpireKey(ctx context.Context, key string, ttl int64) bool {
	ret := _m.Called(ctx, key, ttl)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) bool); ok {
		r0 = rf(ctx, key, ttl)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CacheInterface_ExpireKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireKey'
type CacheInterface_ExpireKey_Call struct {
	*mock.Call
}

// ExpireKey is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - ttl int64
func (_e *CacheInterface_Expecter) ExpireKey(ctx interface{}, key interface{}, ttl interface{}) *CacheInterface_ExpireKey_Call {
	return &CacheInterface_ExpireKey_Call{Call: _e.mock.On("ExpireKey", ctx, key, ttl)}
}

func (_c *CacheInterface_ExpireKey_Call) Run(run func(ctx context.Context, key string, ttl int64)) *CacheInterface_ExpireKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *CacheInterface_ExpireKey_Call) Return(_a0 bool) *CacheInterface_ExpireKey_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: ctx, key, dest
func (_m *CacheInterface) Get(ctx context.Context, key string, dest interface{}) error {
	ret := _m.Called(ctx, key, dest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, key, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CacheInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - dest interface{}
func (_e *CacheInterface_Expecter) Get(ctx interface{}, key interface{}, dest interface{}) *CacheInterface_Get_Call {
	return &CacheInterface_Get_Call{Call: _e.mock.On("Get", ctx, key, dest)}
}

func (_c *CacheInterface_Get_Call) Run(run func(ctx context.Context, key string, dest interface{})) *CacheInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *CacheInterface_Get_Call) Return(_a0 error) *CacheInterface_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetKeysByPrefix provides a mock function with given fields: ctx, prefix
func (_m *CacheInterface) GetKeysByPrefix(ctx context.Context, prefix string) ([]string, error) {
	ret := _m.Called(ctx, prefix)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheInterface_GetKeysByPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeysByPrefix'
type CacheInterface_GetKeysByPrefix_Call struct {
	*mock.Call
}

// GetKeysByPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix string
func (_e *CacheInterface_Expecter) GetKeysByPrefix(ctx interface{}, prefix interface{}) *CacheInterface_GetKeysByPrefix_Call {
	return &CacheInterface_GetKeysByPrefix_Call{Call: _e.mock.On("GetKeysByPrefix", ctx, prefix)}
}

func (_c *CacheInterface_GetKeysByPrefix_Call) Run(run func(ctx context.Context, prefix string)) *CacheInterface_GetKeysByPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CacheInterface_GetKeysByPrefix_Call) Return(_a0 []string, _a1 error) *CacheInterface_GetKeysByPrefix_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetMap provides a mock function with given fields: ctx, key
func (_m *CacheInterface) GetMap(ctx context.Context, key string) (map[string]string, error) {
	ret := _m.Called(ctx, key)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]string); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheInterface_GetMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMap'
type CacheInterface_GetMap_Call struct {
	*mock.Call
}

// GetMap is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *CacheInterface_Expecter) GetMap(ctx interface{}, key interface{}) *CacheInterface_GetMap_Call {
	return &CacheInterface_GetMap_Call{Call: _e.mock.On("GetMap", ctx, key)}
}

func (_c *CacheInterface_GetMap_Call) Run(run func(ctx context.Context, key string)) *CacheInterface_GetMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CacheInterface_GetMap_Call) Return(_a0 map[string]string, _a1 error) *CacheInterface_GetMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// IncrAndSetExpiryOnce provides a mock function with given fields: ctx, key, ttl
func (_m *CacheInterface) IncrAndSetExpiryOnce(ctx context.Context, key string, ttl int64) (int64, error) {
	ret := _m.Called(ctx, key, ttl)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) int64); ok {
		r0 = rf(ctx, key, ttl)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, key, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheInterface_IncrAndSetExpiryOnce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrAndSetExpiryOnce'
type CacheInterface_IncrAndSetExpiryOnce_Call struct {
	*mock.Call
}

// IncrAndSetExpiryOnce is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - ttl int64
func (_e *CacheInterface_Expecter) IncrAndSetExpiryOnce(ctx interface{}, key interface{}, ttl interface{}) *CacheInterface_IncrAndSetExpiryOnce_Call {
	return &CacheInterface_IncrAndSetExpiryOnce_Call{Call: _e.mock.On("IncrAndSetExpiryOnce", ctx, key, ttl)}
}

func (_c *CacheInterface_IncrAndSetExpiryOnce_Call) Run(run func(ctx context.Context, key string, ttl int64)) *CacheInterface_IncrAndSetExpiryOnce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *CacheInterface_IncrAndSetExpiryOnce_Call) Return(_a0 int64, _a1 error) *CacheInterface_IncrAndSetExpiryOnce_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// IncrementBy provides a mock function with given fields: ctx, key, incrValue
func (_m *CacheInterface) IncrementBy(ctx context.Context, key string, incrValue int64) int64 {
	ret := _m.Called(ctx, key, incrValue)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) int64); ok {
		r0 = rf(ctx, key, incrValue)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// CacheInterface_IncrementBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementBy'
type CacheInterface_IncrementBy_Call struct {
	*mock.Call
}

// IncrementBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - incrValue int64
func (_e *CacheInterface_Expecter) IncrementBy(ctx interface{}, key interface{}, incrValue interface{}) *CacheInterface_IncrementBy_Call {
	return &CacheInterface_IncrementBy_Call{Call: _e.mock.On("IncrementBy", ctx, key, incrValue)}
}

func (_c *CacheInterface_IncrementBy_Call) Run(run func(ctx context.Context, key string, incrValue int64)) *CacheInterface_IncrementBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *CacheInterface_IncrementBy_Call) Return(_a0 int64) *CacheInterface_IncrementBy_Call {
	_c.Call.Return(_a0)
	return _c
}

// MultiGet provides a mock function with given fields: ctx, keys
func (_m *CacheInterface) MultiGet(ctx context.Context, keys []string) ([]interface{}, error) {
	ret := _m.Called(ctx, keys)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []interface{}); ok {
		r0 = rf(ctx, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheInterface_MultiGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiGet'
type CacheInterface_MultiGet_Call struct {
	*mock.Call
}

// MultiGet is a helper method to define mock.On call
//   - ctx context.Context
//   - keys []string
func (_e *CacheInterface_Expecter) MultiGet(ctx interface{}, keys interface{}) *CacheInterface_MultiGet_Call {
	return &CacheInterface_MultiGet_Call{Call: _e.mock.On("MultiGet", ctx, keys)}
}

func (_c *CacheInterface_MultiGet_Call) Run(run func(ctx context.Context, keys []string)) *CacheInterface_MultiGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *CacheInterface_MultiGet_Call) Return(_a0 []interface{}, _a1 error) *CacheInterface_MultiGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// MultiSet provides a mock function with given fields: ctx, values
func (_m *CacheInterface) MultiSet(ctx context.Context, values []interface{}) error {
	ret := _m.Called(ctx, values)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []interface{}) error); ok {
		r0 = rf(ctx, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheInterface_MultiSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiSet'
type CacheInterface_MultiSet_Call struct {
	*mock.Call
}

// MultiSet is a helper method to define mock.On call
//   - ctx context.Context
//   - values []interface{}
func (_e *CacheInterface_Expecter) MultiSet(ctx interface{}, values interface{}) *CacheInterface_MultiSet_Call {
	return &CacheInterface_MultiSet_Call{Call: _e.mock.On("MultiSet", ctx, values)}
}

func (_c *CacheInterface_MultiSet_Call) Run(run func(ctx context.Context, values []interface{})) *CacheInterface_MultiSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]interface{}))
	})
	return _c
}

func (_c *CacheInterface_MultiSet_Call) Return(_a0 error) *CacheInterface_MultiSet_Call {
	_c.Call.Return(_a0)
	return _c
}

// Set provides a mock function with given fields: ctx, key, src, ttl
func (_m *CacheInterface) Set(ctx context.Context, key string, src interface{}, ttl time.Duration) error {
	ret := _m.Called(ctx, key, src, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, src, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheInterface_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type CacheInterface_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - src interface{}
//   - ttl time.Duration
func (_e *CacheInterface_Expecter) Set(ctx interface{}, key interface{}, src interface{}, ttl interface{}) *CacheInterface_Set_Call {
	return &CacheInterface_Set_Call{Call: _e.mock.On("Set", ctx, key, src, ttl)}
}

func (_c *CacheInterface_Set_Call) Run(run func(ctx context.Context, key string, src interface{}, ttl time.Duration)) *CacheInterface_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *CacheInterface_Set_Call) Return(_a0 error) *CacheInterface_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

// SetMap provides a mock function with given fields: ctx, key, values, ttl
func (_m *CacheInterface) SetMap(ctx context.Context, key string, values []interface{}, ttl int64) error {
	ret := _m.Called(ctx, key, values, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []interface{}, int64) error); ok {
		r0 = rf(ctx, key, values, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheInterface_SetMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMap'
type CacheInterface_SetMap_Call struct {
	*mock.Call
}

// SetMap is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values []interface{}
//   - ttl int64
func (_e *CacheInterface_Expecter) SetMap(ctx interface{}, key interface{}, values interface{}, ttl interface{}) *CacheInterface_SetMap_Call {
	return &CacheInterface_SetMap_Call{Call: _e.mock.On("SetMap", ctx, key, values, ttl)}
}

func (_c *CacheInterface_SetMap_Call) Run(run func(ctx context.Context, key string, values []interface{}, ttl int64)) *CacheInterface_SetMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]interface{}), args[3].(int64))
	})
	return _c
}

func (_c *CacheInterface_SetMap_Call) Return(_a0 error) *CacheInterface_SetMap_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewCacheInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewCacheInterface creates a new instance of CacheInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCacheInterface(t mockConstructorTestingTNewCacheInterface) *CacheInterface {
	mock := &CacheInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
