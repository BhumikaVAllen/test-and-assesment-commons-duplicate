// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Allen-Career-Institute/test-and-assessment-commons/pkg/data/entity"
	mock "github.com/stretchr/testify/mock"
)

// IStudentTestResultRepository is an autogenerated mock type for the IStudentTestResultRepository type
type IStudentTestResultRepository struct {
	mock.Mock
}

type IStudentTestResultRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IStudentTestResultRepository) EXPECT() *IStudentTestResultRepository_Expecter {
	return &IStudentTestResultRepository_Expecter{mock: &_m.Mock}
}

// CreateStudentTestResult provides a mock function with given fields: ctx, studentTestResult
func (_m *IStudentTestResultRepository) CreateStudentTestResult(ctx context.Context, studentTestResult entity.StudentTestResultEntity) error {
	ret := _m.Called(ctx, studentTestResult)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.StudentTestResultEntity) error); ok {
		r0 = rf(ctx, studentTestResult)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IStudentTestResultRepository_CreateStudentTestResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStudentTestResult'
type IStudentTestResultRepository_CreateStudentTestResult_Call struct {
	*mock.Call
}

// CreateStudentTestResult is a helper method to define mock.On call
//   - ctx context.Context
//   - studentTestResult entity.StudentTestResultEntity
func (_e *IStudentTestResultRepository_Expecter) CreateStudentTestResult(ctx interface{}, studentTestResult interface{}) *IStudentTestResultRepository_CreateStudentTestResult_Call {
	return &IStudentTestResultRepository_CreateStudentTestResult_Call{Call: _e.mock.On("CreateStudentTestResult", ctx, studentTestResult)}
}

func (_c *IStudentTestResultRepository_CreateStudentTestResult_Call) Run(run func(ctx context.Context, studentTestResult entity.StudentTestResultEntity)) *IStudentTestResultRepository_CreateStudentTestResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.StudentTestResultEntity))
	})
	return _c
}

func (_c *IStudentTestResultRepository_CreateStudentTestResult_Call) Return(_a0 error) *IStudentTestResultRepository_CreateStudentTestResult_Call {
	_c.Call.Return(_a0)
	return _c
}

// FindByStudentIDTestID provides a mock function with given fields: ctx, studentID, testID
func (_m *IStudentTestResultRepository) FindByStudentIDTestID(ctx context.Context, studentID string, testID string) (*entity.StudentTestResultEntity, error) {
	ret := _m.Called(ctx, studentID, testID)

	var r0 *entity.StudentTestResultEntity
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.StudentTestResultEntity); ok {
		r0 = rf(ctx, studentID, testID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.StudentTestResultEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, studentID, testID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentTestResultRepository_FindByStudentIDTestID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByStudentIDTestID'
type IStudentTestResultRepository_FindByStudentIDTestID_Call struct {
	*mock.Call
}

// FindByStudentIDTestID is a helper method to define mock.On call
//   - ctx context.Context
//   - studentID string
//   - testID string
func (_e *IStudentTestResultRepository_Expecter) FindByStudentIDTestID(ctx interface{}, studentID interface{}, testID interface{}) *IStudentTestResultRepository_FindByStudentIDTestID_Call {
	return &IStudentTestResultRepository_FindByStudentIDTestID_Call{Call: _e.mock.On("FindByStudentIDTestID", ctx, studentID, testID)}
}

func (_c *IStudentTestResultRepository_FindByStudentIDTestID_Call) Run(run func(ctx context.Context, studentID string, testID string)) *IStudentTestResultRepository_FindByStudentIDTestID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *IStudentTestResultRepository_FindByStudentIDTestID_Call) Return(_a0 *entity.StudentTestResultEntity, _a1 error) *IStudentTestResultRepository_FindByStudentIDTestID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateStudentTestResult provides a mock function with given fields: ctx, studentTestResultInput
func (_m *IStudentTestResultRepository) UpdateStudentTestResult(ctx context.Context, studentTestResultInput *entity.StudentTestResultEntity) (*entity.StudentTestResultEntity, error) {
	ret := _m.Called(ctx, studentTestResultInput)

	var r0 *entity.StudentTestResultEntity
	if rf, ok := ret.Get(0).(func(context.Context, *entity.StudentTestResultEntity) *entity.StudentTestResultEntity); ok {
		r0 = rf(ctx, studentTestResultInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.StudentTestResultEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.StudentTestResultEntity) error); ok {
		r1 = rf(ctx, studentTestResultInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentTestResultRepository_UpdateStudentTestResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStudentTestResult'
type IStudentTestResultRepository_UpdateStudentTestResult_Call struct {
	*mock.Call
}

// UpdateStudentTestResult is a helper method to define mock.On call
//   - ctx context.Context
//   - studentTestResultInput *entity.StudentTestResultEntity
func (_e *IStudentTestResultRepository_Expecter) UpdateStudentTestResult(ctx interface{}, studentTestResultInput interface{}) *IStudentTestResultRepository_UpdateStudentTestResult_Call {
	return &IStudentTestResultRepository_UpdateStudentTestResult_Call{Call: _e.mock.On("UpdateStudentTestResult", ctx, studentTestResultInput)}
}

func (_c *IStudentTestResultRepository_UpdateStudentTestResult_Call) Run(run func(ctx context.Context, studentTestResultInput *entity.StudentTestResultEntity)) *IStudentTestResultRepository_UpdateStudentTestResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.StudentTestResultEntity))
	})
	return _c
}

func (_c *IStudentTestResultRepository_UpdateStudentTestResult_Call) Return(_a0 *entity.StudentTestResultEntity, _a1 error) *IStudentTestResultRepository_UpdateStudentTestResult_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewIStudentTestResultRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIStudentTestResultRepository creates a new instance of IStudentTestResultRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIStudentTestResultRepository(t mockConstructorTestingTNewIStudentTestResultRepository) *IStudentTestResultRepository {
	mock := &IStudentTestResultRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
