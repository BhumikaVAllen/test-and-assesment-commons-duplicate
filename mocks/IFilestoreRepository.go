// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IFilestoreRepository is an autogenerated mock type for the IFilestoreRepository type
type IFilestoreRepository[T interface{}] struct {
	mock.Mock
}

type IFilestoreRepository_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *IFilestoreRepository[T]) EXPECT() *IFilestoreRepository_Expecter[T] {
	return &IFilestoreRepository_Expecter[T]{mock: &_m.Mock}
}

// DownloadFile provides a mock function with given fields: request
func (_m *IFilestoreRepository[T]) DownloadFile(request *T) ([]byte, error) {
	ret := _m.Called(request)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*T) []byte); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*T) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IFilestoreRepository_DownloadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFile'
type IFilestoreRepository_DownloadFile_Call[T interface{}] struct {
	*mock.Call
}

// DownloadFile is a helper method to define mock.On call
//   - request *T
func (_e *IFilestoreRepository_Expecter[T]) DownloadFile(request interface{}) *IFilestoreRepository_DownloadFile_Call[T] {
	return &IFilestoreRepository_DownloadFile_Call[T]{Call: _e.mock.On("DownloadFile", request)}
}

func (_c *IFilestoreRepository_DownloadFile_Call[T]) Run(run func(request *T)) *IFilestoreRepository_DownloadFile_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*T))
	})
	return _c
}

func (_c *IFilestoreRepository_DownloadFile_Call[T]) Return(_a0 []byte, _a1 error) *IFilestoreRepository_DownloadFile_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GeneratePreSignedURl provides a mock function with given fields: request
func (_m *IFilestoreRepository[T]) GeneratePreSignedURl(request *T) (*string, error) {
	ret := _m.Called(request)

	var r0 *string
	if rf, ok := ret.Get(0).(func(*T) *string); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*T) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IFilestoreRepository_GeneratePreSignedURl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeneratePreSignedURl'
type IFilestoreRepository_GeneratePreSignedURl_Call[T interface{}] struct {
	*mock.Call
}

// GeneratePreSignedURl is a helper method to define mock.On call
//   - request *T
func (_e *IFilestoreRepository_Expecter[T]) GeneratePreSignedURl(request interface{}) *IFilestoreRepository_GeneratePreSignedURl_Call[T] {
	return &IFilestoreRepository_GeneratePreSignedURl_Call[T]{Call: _e.mock.On("GeneratePreSignedURl", request)}
}

func (_c *IFilestoreRepository_GeneratePreSignedURl_Call[T]) Run(run func(request *T)) *IFilestoreRepository_GeneratePreSignedURl_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*T))
	})
	return _c
}

func (_c *IFilestoreRepository_GeneratePreSignedURl_Call[T]) Return(_a0 *string, _a1 error) *IFilestoreRepository_GeneratePreSignedURl_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UploadFile provides a mock function with given fields: request
func (_m *IFilestoreRepository[T]) UploadFile(request *T) (*string, error) {
	ret := _m.Called(request)

	var r0 *string
	if rf, ok := ret.Get(0).(func(*T) *string); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*T) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IFilestoreRepository_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type IFilestoreRepository_UploadFile_Call[T interface{}] struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - request *T
func (_e *IFilestoreRepository_Expecter[T]) UploadFile(request interface{}) *IFilestoreRepository_UploadFile_Call[T] {
	return &IFilestoreRepository_UploadFile_Call[T]{Call: _e.mock.On("UploadFile", request)}
}

func (_c *IFilestoreRepository_UploadFile_Call[T]) Run(run func(request *T)) *IFilestoreRepository_UploadFile_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*T))
	})
	return _c
}

func (_c *IFilestoreRepository_UploadFile_Call[T]) Return(_a0 *string, _a1 error) *IFilestoreRepository_UploadFile_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewIFilestoreRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIFilestoreRepository creates a new instance of IFilestoreRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIFilestoreRepository[T interface{}](t mockConstructorTestingTNewIFilestoreRepository) *IFilestoreRepository[T] {
	mock := &IFilestoreRepository[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
