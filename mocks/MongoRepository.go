// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"

	mongodb "github.com/Allen-Career-Institute/test-and-assessment-commons/pkg/data/mongodb"
)

// MongoRepository is an autogenerated mock type for the MongoRepository type
type MongoRepository struct {
	mock.Mock
}

type MongoRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MongoRepository) EXPECT() *MongoRepository_Expecter {
	return &MongoRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, filter, collectionName
func (_m *MongoRepository) Get(ctx context.Context, filter interface{}, collectionName string) (*mongo.SingleResult, error) {
	ret := _m.Called(ctx, filter, collectionName)

	var r0 *mongo.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string) *mongo.SingleResult); ok {
		r0 = rf(ctx, filter, collectionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SingleResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, string) error); ok {
		r1 = rf(ctx, filter, collectionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MongoRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MongoRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - collectionName string
func (_e *MongoRepository_Expecter) Get(ctx interface{}, filter interface{}, collectionName interface{}) *MongoRepository_Get_Call {
	return &MongoRepository_Get_Call{Call: _e.mock.On("Get", ctx, filter, collectionName)}
}

func (_c *MongoRepository_Get_Call) Run(run func(ctx context.Context, filter interface{}, collectionName string)) *MongoRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string))
	})
	return _c
}

func (_c *MongoRepository_Get_Call) Return(_a0 *mongo.SingleResult, _a1 error) *MongoRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// InsertDocument provides a mock function with given fields: ctx, document, collectionName
func (_m *MongoRepository) InsertDocument(ctx context.Context, document interface{}, collectionName string) (interface{}, error) {
	ret := _m.Called(ctx, document, collectionName)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string) interface{}); ok {
		r0 = rf(ctx, document, collectionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, string) error); ok {
		r1 = rf(ctx, document, collectionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MongoRepository_InsertDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertDocument'
type MongoRepository_InsertDocument_Call struct {
	*mock.Call
}

// InsertDocument is a helper method to define mock.On call
//   - ctx context.Context
//   - document interface{}
//   - collectionName string
func (_e *MongoRepository_Expecter) InsertDocument(ctx interface{}, document interface{}, collectionName interface{}) *MongoRepository_InsertDocument_Call {
	return &MongoRepository_InsertDocument_Call{Call: _e.mock.On("InsertDocument", ctx, document, collectionName)}
}

func (_c *MongoRepository_InsertDocument_Call) Run(run func(ctx context.Context, document interface{}, collectionName string)) *MongoRepository_InsertDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string))
	})
	return _c
}

func (_c *MongoRepository_InsertDocument_Call) Return(_a0 interface{}, _a1 error) *MongoRepository_InsertDocument_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// InsertDocuments provides a mock function with given fields: ctx, documentsCollectionMap
func (_m *MongoRepository) InsertDocuments(ctx context.Context, documentsCollectionMap []mongodb.DocumentCollectionMap) ([]interface{}, error) {
	ret := _m.Called(ctx, documentsCollectionMap)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(context.Context, []mongodb.DocumentCollectionMap) []interface{}); ok {
		r0 = rf(ctx, documentsCollectionMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []mongodb.DocumentCollectionMap) error); ok {
		r1 = rf(ctx, documentsCollectionMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MongoRepository_InsertDocuments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertDocuments'
type MongoRepository_InsertDocuments_Call struct {
	*mock.Call
}

// InsertDocuments is a helper method to define mock.On call
//   - ctx context.Context
//   - documentsCollectionMap []mongodb.DocumentCollectionMap
func (_e *MongoRepository_Expecter) InsertDocuments(ctx interface{}, documentsCollectionMap interface{}) *MongoRepository_InsertDocuments_Call {
	return &MongoRepository_InsertDocuments_Call{Call: _e.mock.On("InsertDocuments", ctx, documentsCollectionMap)}
}

func (_c *MongoRepository_InsertDocuments_Call) Run(run func(ctx context.Context, documentsCollectionMap []mongodb.DocumentCollectionMap)) *MongoRepository_InsertDocuments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]mongodb.DocumentCollectionMap))
	})
	return _c
}

func (_c *MongoRepository_InsertDocuments_Call) Return(_a0 []interface{}, _a1 error) *MongoRepository_InsertDocuments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: ctx, filter, document, collectionName
func (_m *MongoRepository) Update(ctx context.Context, filter interface{}, document interface{}, collectionName string) (*mongo.SingleResult, error) {
	ret := _m.Called(ctx, filter, document, collectionName)

	var r0 *mongo.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, string) *mongo.SingleResult); ok {
		r0 = rf(ctx, filter, document, collectionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SingleResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, string) error); ok {
		r1 = rf(ctx, filter, document, collectionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MongoRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MongoRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - document interface{}
//   - collectionName string
func (_e *MongoRepository_Expecter) Update(ctx interface{}, filter interface{}, document interface{}, collectionName interface{}) *MongoRepository_Update_Call {
	return &MongoRepository_Update_Call{Call: _e.mock.On("Update", ctx, filter, document, collectionName)}
}

func (_c *MongoRepository_Update_Call) Run(run func(ctx context.Context, filter interface{}, document interface{}, collectionName string)) *MongoRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), args[3].(string))
	})
	return _c
}

func (_c *MongoRepository_Update_Call) Return(_a0 *mongo.SingleResult, _a1 error) *MongoRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMongoRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMongoRepository creates a new instance of MongoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMongoRepository(t mockConstructorTestingTNewMongoRepository) *MongoRepository {
	mock := &MongoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
