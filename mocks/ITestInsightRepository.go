// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Allen-Career-Institute/test-and-assessment-commons/pkg/data/entity"
	mock "github.com/stretchr/testify/mock"
)

// ITestInsightRepository is an autogenerated mock type for the ITestInsightRepository type
type ITestInsightRepository struct {
	mock.Mock
}

type ITestInsightRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ITestInsightRepository) EXPECT() *ITestInsightRepository_Expecter {
	return &ITestInsightRepository_Expecter{mock: &_m.Mock}
}

// CreateTestInsight provides a mock function with given fields: ctx, TestInsight
func (_m *ITestInsightRepository) CreateTestInsight(ctx context.Context, TestInsight entity.TestInsightEntity) error {
	ret := _m.Called(ctx, TestInsight)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.TestInsightEntity) error); ok {
		r0 = rf(ctx, TestInsight)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ITestInsightRepository_CreateTestInsight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTestInsight'
type ITestInsightRepository_CreateTestInsight_Call struct {
	*mock.Call
}

// CreateTestInsight is a helper method to define mock.On call
//   - ctx context.Context
//   - TestInsight entity.TestInsightEntity
func (_e *ITestInsightRepository_Expecter) CreateTestInsight(ctx interface{}, TestInsight interface{}) *ITestInsightRepository_CreateTestInsight_Call {
	return &ITestInsightRepository_CreateTestInsight_Call{Call: _e.mock.On("CreateTestInsight", ctx, TestInsight)}
}

func (_c *ITestInsightRepository_CreateTestInsight_Call) Run(run func(ctx context.Context, TestInsight entity.TestInsightEntity)) *ITestInsightRepository_CreateTestInsight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.TestInsightEntity))
	})
	return _c
}

func (_c *ITestInsightRepository_CreateTestInsight_Call) Return(_a0 error) *ITestInsightRepository_CreateTestInsight_Call {
	_c.Call.Return(_a0)
	return _c
}

// FindByTestID provides a mock function with given fields: ctx, testID
func (_m *ITestInsightRepository) FindByTestID(ctx context.Context, testID string) (*entity.TestInsightEntity, error) {
	ret := _m.Called(ctx, testID)

	var r0 *entity.TestInsightEntity
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.TestInsightEntity); ok {
		r0 = rf(ctx, testID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TestInsightEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, testID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ITestInsightRepository_FindByTestID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByTestID'
type ITestInsightRepository_FindByTestID_Call struct {
	*mock.Call
}

// FindByTestID is a helper method to define mock.On call
//   - ctx context.Context
//   - testID string
func (_e *ITestInsightRepository_Expecter) FindByTestID(ctx interface{}, testID interface{}) *ITestInsightRepository_FindByTestID_Call {
	return &ITestInsightRepository_FindByTestID_Call{Call: _e.mock.On("FindByTestID", ctx, testID)}
}

func (_c *ITestInsightRepository_FindByTestID_Call) Run(run func(ctx context.Context, testID string)) *ITestInsightRepository_FindByTestID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ITestInsightRepository_FindByTestID_Call) Return(_a0 *entity.TestInsightEntity, _a1 error) *ITestInsightRepository_FindByTestID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewITestInsightRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewITestInsightRepository creates a new instance of ITestInsightRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewITestInsightRepository(t mockConstructorTestingTNewITestInsightRepository) *ITestInsightRepository {
	mock := &ITestInsightRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
