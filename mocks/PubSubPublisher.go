// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/Allen-Career-Institute/go-kratos-commons/pubsub/v1"
)

// PubSubPublisher is an autogenerated mock type for the PubSubPublisher type
type PubSubPublisher struct {
	mock.Mock
}

type PubSubPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *PubSubPublisher) EXPECT() *PubSubPublisher_Expecter {
	return &PubSubPublisher_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: ctx, topic, message, metadata
func (_m *PubSubPublisher) Publish(ctx context.Context, topic string, message string, metadata map[string]string) error {
	ret := _m.Called(ctx, topic, message, metadata)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) error); ok {
		r0 = rf(ctx, topic, message, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PubSubPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type PubSubPublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
//   - message string
//   - metadata map[string]string
func (_e *PubSubPublisher_Expecter) Publish(ctx interface{}, topic interface{}, message interface{}, metadata interface{}) *PubSubPublisher_Publish_Call {
	return &PubSubPublisher_Publish_Call{Call: _e.mock.On("Publish", ctx, topic, message, metadata)}
}

func (_c *PubSubPublisher_Publish_Call) Run(run func(ctx context.Context, topic string, message string, metadata map[string]string)) *PubSubPublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(map[string]string))
	})
	return _c
}

func (_c *PubSubPublisher_Publish_Call) Return(_a0 error) *PubSubPublisher_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

// PublishMessage provides a mock function with given fields: ctx, topic, message, metadata
func (_m *PubSubPublisher) PublishMessage(ctx context.Context, topic string, message v1.Message, metadata map[string]string) error {
	ret := _m.Called(ctx, topic, message, metadata)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.Message, map[string]string) error); ok {
		r0 = rf(ctx, topic, message, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PubSubPublisher_PublishMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishMessage'
type PubSubPublisher_PublishMessage_Call struct {
	*mock.Call
}

// PublishMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
//   - message v1.Message
//   - metadata map[string]string
func (_e *PubSubPublisher_Expecter) PublishMessage(ctx interface{}, topic interface{}, message interface{}, metadata interface{}) *PubSubPublisher_PublishMessage_Call {
	return &PubSubPublisher_PublishMessage_Call{Call: _e.mock.On("PublishMessage", ctx, topic, message, metadata)}
}

func (_c *PubSubPublisher_PublishMessage_Call) Run(run func(ctx context.Context, topic string, message v1.Message, metadata map[string]string)) *PubSubPublisher_PublishMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(v1.Message), args[3].(map[string]string))
	})
	return _c
}

func (_c *PubSubPublisher_PublishMessage_Call) Return(_a0 error) *PubSubPublisher_PublishMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

// SetupPublisher provides a mock function with given fields: ctx, config
func (_m *PubSubPublisher) SetupPublisher(ctx context.Context, config map[string]interface{}) error {
	ret := _m.Called(ctx, config)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) error); ok {
		r0 = rf(ctx, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PubSubPublisher_SetupPublisher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupPublisher'
type PubSubPublisher_SetupPublisher_Call struct {
	*mock.Call
}

// SetupPublisher is a helper method to define mock.On call
//   - ctx context.Context
//   - config map[string]interface{}
func (_e *PubSubPublisher_Expecter) SetupPublisher(ctx interface{}, config interface{}) *PubSubPublisher_SetupPublisher_Call {
	return &PubSubPublisher_SetupPublisher_Call{Call: _e.mock.On("SetupPublisher", ctx, config)}
}

func (_c *PubSubPublisher_SetupPublisher_Call) Run(run func(ctx context.Context, config map[string]interface{})) *PubSubPublisher_SetupPublisher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *PubSubPublisher_SetupPublisher_Call) Return(_a0 error) *PubSubPublisher_SetupPublisher_Call {
	_c.Call.Return(_a0)
	return _c
}

// Shutdown provides a mock function with given fields: ctx
func (_m *PubSubPublisher) Shutdown(ctx context.Context) {
	_m.Called(ctx)
}

// PubSubPublisher_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type PubSubPublisher_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PubSubPublisher_Expecter) Shutdown(ctx interface{}) *PubSubPublisher_Shutdown_Call {
	return &PubSubPublisher_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *PubSubPublisher_Shutdown_Call) Run(run func(ctx context.Context)) *PubSubPublisher_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PubSubPublisher_Shutdown_Call) Return() *PubSubPublisher_Shutdown_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewPubSubPublisher interface {
	mock.TestingT
	Cleanup(func())
}

// NewPubSubPublisher creates a new instance of PubSubPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPubSubPublisher(t mockConstructorTestingTNewPubSubPublisher) *PubSubPublisher {
	mock := &PubSubPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
