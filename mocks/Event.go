// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Event is an autogenerated mock type for the Event type
type Event struct {
	mock.Mock
}

type Event_Expecter struct {
	mock *mock.Mock
}

func (_m *Event) EXPECT() *Event_Expecter {
	return &Event_Expecter{mock: &_m.Mock}
}

// GetEntityID provides a mock function with given fields:
func (_m *Event) GetEntityID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Event_GetEntityID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntityID'
type Event_GetEntityID_Call struct {
	*mock.Call
}

// GetEntityID is a helper method to define mock.On call
func (_e *Event_Expecter) GetEntityID() *Event_GetEntityID_Call {
	return &Event_GetEntityID_Call{Call: _e.mock.On("GetEntityID")}
}

func (_c *Event_GetEntityID_Call) Run(run func()) *Event_GetEntityID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_GetEntityID_Call) Return(_a0 string) *Event_GetEntityID_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetStringMessage provides a mock function with given fields:
func (_m *Event) GetStringMessage() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Event_GetStringMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringMessage'
type Event_GetStringMessage_Call struct {
	*mock.Call
}

// GetStringMessage is a helper method to define mock.On call
func (_e *Event_Expecter) GetStringMessage() *Event_GetStringMessage_Call {
	return &Event_GetStringMessage_Call{Call: _e.mock.On("GetStringMessage")}
}

func (_c *Event_GetStringMessage_Call) Run(run func()) *Event_GetStringMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_GetStringMessage_Call) Return(_a0 string, _a1 error) *Event_GetStringMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewEvent interface {
	mock.TestingT
	Cleanup(func())
}

// NewEvent creates a new instance of Event. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEvent(t mockConstructorTestingTNewEvent) *Event {
	mock := &Event{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
