// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Allen-Career-Institute/test-and-assessment-commons/pkg/data/entity"

	mock "github.com/stretchr/testify/mock"
)

// StudentTestActionRepository is an autogenerated mock type for the StudentTestActionRepository type
type StudentTestActionRepository struct {
	mock.Mock
}

type StudentTestActionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *StudentTestActionRepository) EXPECT() *StudentTestActionRepository_Expecter {
	return &StudentTestActionRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, e
func (_m *StudentTestActionRepository) Create(ctx context.Context, e *entity.StudentTestActionEntity) error {
	ret := _m.Called(ctx, e)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.StudentTestActionEntity) error); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StudentTestActionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type StudentTestActionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - e *entity.StudentTestActionEntity
func (_e *StudentTestActionRepository_Expecter) Create(ctx interface{}, e interface{}) *StudentTestActionRepository_Create_Call {
	return &StudentTestActionRepository_Create_Call{Call: _e.mock.On("Create", ctx, e)}
}

func (_c *StudentTestActionRepository_Create_Call) Run(run func(ctx context.Context, e *entity.StudentTestActionEntity)) *StudentTestActionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.StudentTestActionEntity))
	})
	return _c
}

func (_c *StudentTestActionRepository_Create_Call) Return(_a0 error) *StudentTestActionRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

// FindAllByTestIDStudentID provides a mock function with given fields: ctx, testID, studentID
func (_m *StudentTestActionRepository) FindAllByTestIDStudentID(ctx context.Context, testID string, studentID string) ([]*entity.StudentTestActionEntity, error) {
	ret := _m.Called(ctx, testID, studentID)

	var r0 []*entity.StudentTestActionEntity
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*entity.StudentTestActionEntity); ok {
		r0 = rf(ctx, testID, studentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.StudentTestActionEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, testID, studentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentTestActionRepository_FindAllByTestIDStudentID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllByTestIDStudentID'
type StudentTestActionRepository_FindAllByTestIDStudentID_Call struct {
	*mock.Call
}

// FindAllByTestIDStudentID is a helper method to define mock.On call
//   - ctx context.Context
//   - testID string
//   - studentID string
func (_e *StudentTestActionRepository_Expecter) FindAllByTestIDStudentID(ctx interface{}, testID interface{}, studentID interface{}) *StudentTestActionRepository_FindAllByTestIDStudentID_Call {
	return &StudentTestActionRepository_FindAllByTestIDStudentID_Call{Call: _e.mock.On("FindAllByTestIDStudentID", ctx, testID, studentID)}
}

func (_c *StudentTestActionRepository_FindAllByTestIDStudentID_Call) Run(run func(ctx context.Context, testID string, studentID string)) *StudentTestActionRepository_FindAllByTestIDStudentID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *StudentTestActionRepository_FindAllByTestIDStudentID_Call) Return(_a0 []*entity.StudentTestActionEntity, _a1 error) *StudentTestActionRepository_FindAllByTestIDStudentID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindAllByTestIDStudentIDNamespace provides a mock function with given fields: _a0, testID, studentID, namespace
func (_m *StudentTestActionRepository) FindAllByTestIDStudentIDNamespace(_a0 context.Context, testID string, studentID string, namespace string) ([]*entity.StudentTestActionEntity, error) {
	ret := _m.Called(_a0, testID, studentID, namespace)

	var r0 []*entity.StudentTestActionEntity
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []*entity.StudentTestActionEntity); ok {
		r0 = rf(_a0, testID, studentID, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.StudentTestActionEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(_a0, testID, studentID, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentTestActionRepository_FindAllByTestIDStudentIDNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllByTestIDStudentIDNamespace'
type StudentTestActionRepository_FindAllByTestIDStudentIDNamespace_Call struct {
	*mock.Call
}

// FindAllByTestIDStudentIDNamespace is a helper method to define mock.On call
//   - _a0 context.Context
//   - testID string
//   - studentID string
//   - namespace string
func (_e *StudentTestActionRepository_Expecter) FindAllByTestIDStudentIDNamespace(_a0 interface{}, testID interface{}, studentID interface{}, namespace interface{}) *StudentTestActionRepository_FindAllByTestIDStudentIDNamespace_Call {
	return &StudentTestActionRepository_FindAllByTestIDStudentIDNamespace_Call{Call: _e.mock.On("FindAllByTestIDStudentIDNamespace", _a0, testID, studentID, namespace)}
}

func (_c *StudentTestActionRepository_FindAllByTestIDStudentIDNamespace_Call) Run(run func(_a0 context.Context, testID string, studentID string, namespace string)) *StudentTestActionRepository_FindAllByTestIDStudentIDNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *StudentTestActionRepository_FindAllByTestIDStudentIDNamespace_Call) Return(_a0 []*entity.StudentTestActionEntity, _a1 error) *StudentTestActionRepository_FindAllByTestIDStudentIDNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *StudentTestActionRepository) FindByID(ctx context.Context, id string) (*entity.StudentTestActionEntity, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.StudentTestActionEntity
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.StudentTestActionEntity); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.StudentTestActionEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentTestActionRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type StudentTestActionRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *StudentTestActionRepository_Expecter) FindByID(ctx interface{}, id interface{}) *StudentTestActionRepository_FindByID_Call {
	return &StudentTestActionRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *StudentTestActionRepository_FindByID_Call) Run(run func(ctx context.Context, id string)) *StudentTestActionRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StudentTestActionRepository_FindByID_Call) Return(_a0 *entity.StudentTestActionEntity, _a1 error) *StudentTestActionRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// List provides a mock function with given fields: ctx, offset, limit
func (_m *StudentTestActionRepository) List(ctx context.Context, offset uint, limit int) ([]*entity.StudentTestActionEntity, error) {
	ret := _m.Called(ctx, offset, limit)

	var r0 []*entity.StudentTestActionEntity
	if rf, ok := ret.Get(0).(func(context.Context, uint, int) []*entity.StudentTestActionEntity); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.StudentTestActionEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, int) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentTestActionRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type StudentTestActionRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - offset uint
//   - limit int
func (_e *StudentTestActionRepository_Expecter) List(ctx interface{}, offset interface{}, limit interface{}) *StudentTestActionRepository_List_Call {
	return &StudentTestActionRepository_List_Call{Call: _e.mock.On("List", ctx, offset, limit)}
}

func (_c *StudentTestActionRepository_List_Call) Run(run func(ctx context.Context, offset uint, limit int)) *StudentTestActionRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(int))
	})
	return _c
}

func (_c *StudentTestActionRepository_List_Call) Return(_a0 []*entity.StudentTestActionEntity, _a1 error) *StudentTestActionRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: ctx, e
func (_m *StudentTestActionRepository) Update(ctx context.Context, e *entity.StudentTestActionEntity) (*entity.StudentTestActionEntity, error) {
	ret := _m.Called(ctx, e)

	var r0 *entity.StudentTestActionEntity
	if rf, ok := ret.Get(0).(func(context.Context, *entity.StudentTestActionEntity) *entity.StudentTestActionEntity); ok {
		r0 = rf(ctx, e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.StudentTestActionEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.StudentTestActionEntity) error); ok {
		r1 = rf(ctx, e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentTestActionRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type StudentTestActionRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - e *entity.StudentTestActionEntity
func (_e *StudentTestActionRepository_Expecter) Update(ctx interface{}, e interface{}) *StudentTestActionRepository_Update_Call {
	return &StudentTestActionRepository_Update_Call{Call: _e.mock.On("Update", ctx, e)}
}

func (_c *StudentTestActionRepository_Update_Call) Run(run func(ctx context.Context, e *entity.StudentTestActionEntity)) *StudentTestActionRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.StudentTestActionEntity))
	})
	return _c
}

func (_c *StudentTestActionRepository_Update_Call) Return(_a0 *entity.StudentTestActionEntity, _a1 error) *StudentTestActionRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewStudentTestActionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewStudentTestActionRepository creates a new instance of StudentTestActionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStudentTestActionRepository(t mockConstructorTestingTNewStudentTestActionRepository) *StudentTestActionRepository {
	mock := &StudentTestActionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
