// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Allen-Career-Institute/test-and-assessment-commons/pkg/data/entity"
	data_filters "github.com/Allen-Career-Institute/test-and-assessment-commons/pkg/data/mongodb/data_filters"

	mock "github.com/stretchr/testify/mock"
)

// ITestInfoRepository is an autogenerated mock type for the ITestInfoRepository type
type ITestInfoRepository struct {
	mock.Mock
}

type ITestInfoRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ITestInfoRepository) EXPECT() *ITestInfoRepository_Expecter {
	return &ITestInfoRepository_Expecter{mock: &_m.Mock}
}

// CreateTest provides a mock function with given fields: ctx, testInfo
func (_m *ITestInfoRepository) CreateTest(ctx context.Context, testInfo *entity.TestInfoEntity) error {
	ret := _m.Called(ctx, testInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.TestInfoEntity) error); ok {
		r0 = rf(ctx, testInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ITestInfoRepository_CreateTest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTest'
type ITestInfoRepository_CreateTest_Call struct {
	*mock.Call
}

// CreateTest is a helper method to define mock.On call
//   - ctx context.Context
//   - testInfo *entity.TestInfoEntity
func (_e *ITestInfoRepository_Expecter) CreateTest(ctx interface{}, testInfo interface{}) *ITestInfoRepository_CreateTest_Call {
	return &ITestInfoRepository_CreateTest_Call{Call: _e.mock.On("CreateTest", ctx, testInfo)}
}

func (_c *ITestInfoRepository_CreateTest_Call) Run(run func(ctx context.Context, testInfo *entity.TestInfoEntity)) *ITestInfoRepository_CreateTest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.TestInfoEntity))
	})
	return _c
}

func (_c *ITestInfoRepository_CreateTest_Call) Return(_a0 error) *ITestInfoRepository_CreateTest_Call {
	_c.Call.Return(_a0)
	return _c
}

// FilterTests provides a mock function with given fields: ctx, dataFilter
func (_m *ITestInfoRepository) FilterTests(ctx context.Context, dataFilter data_filters.TestFilter) (*data_filters.TestFilterResponse, error) {
	ret := _m.Called(ctx, dataFilter)

	var r0 *data_filters.TestFilterResponse
	if rf, ok := ret.Get(0).(func(context.Context, data_filters.TestFilter) *data_filters.TestFilterResponse); ok {
		r0 = rf(ctx, dataFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data_filters.TestFilterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, data_filters.TestFilter) error); ok {
		r1 = rf(ctx, dataFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ITestInfoRepository_FilterTests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterTests'
type ITestInfoRepository_FilterTests_Call struct {
	*mock.Call
}

// FilterTests is a helper method to define mock.On call
//   - ctx context.Context
//   - dataFilter data_filters.TestFilter
func (_e *ITestInfoRepository_Expecter) FilterTests(ctx interface{}, dataFilter interface{}) *ITestInfoRepository_FilterTests_Call {
	return &ITestInfoRepository_FilterTests_Call{Call: _e.mock.On("FilterTests", ctx, dataFilter)}
}

func (_c *ITestInfoRepository_FilterTests_Call) Run(run func(ctx context.Context, dataFilter data_filters.TestFilter)) *ITestInfoRepository_FilterTests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(data_filters.TestFilter))
	})
	return _c
}

func (_c *ITestInfoRepository_FilterTests_Call) Return(_a0 *data_filters.TestFilterResponse, _a1 error) *ITestInfoRepository_FilterTests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTest provides a mock function with given fields: ctx, testID
func (_m *ITestInfoRepository) GetTest(ctx context.Context, testID string) (*entity.TestInfoEntity, error) {
	ret := _m.Called(ctx, testID)

	var r0 *entity.TestInfoEntity
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.TestInfoEntity); ok {
		r0 = rf(ctx, testID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TestInfoEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, testID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ITestInfoRepository_GetTest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTest'
type ITestInfoRepository_GetTest_Call struct {
	*mock.Call
}

// GetTest is a helper method to define mock.On call
//   - ctx context.Context
//   - testID string
func (_e *ITestInfoRepository_Expecter) GetTest(ctx interface{}, testID interface{}) *ITestInfoRepository_GetTest_Call {
	return &ITestInfoRepository_GetTest_Call{Call: _e.mock.On("GetTest", ctx, testID)}
}

func (_c *ITestInfoRepository_GetTest_Call) Run(run func(ctx context.Context, testID string)) *ITestInfoRepository_GetTest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ITestInfoRepository_GetTest_Call) Return(_a0 *entity.TestInfoEntity, _a1 error) *ITestInfoRepository_GetTest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateTest provides a mock function with given fields: ctx, testInfoEntity
func (_m *ITestInfoRepository) UpdateTest(ctx context.Context, testInfoEntity *entity.TestInfoEntity) error {
	ret := _m.Called(ctx, testInfoEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.TestInfoEntity) error); ok {
		r0 = rf(ctx, testInfoEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ITestInfoRepository_UpdateTest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTest'
type ITestInfoRepository_UpdateTest_Call struct {
	*mock.Call
}

// UpdateTest is a helper method to define mock.On call
//   - ctx context.Context
//   - testInfoEntity *entity.TestInfoEntity
func (_e *ITestInfoRepository_Expecter) UpdateTest(ctx interface{}, testInfoEntity interface{}) *ITestInfoRepository_UpdateTest_Call {
	return &ITestInfoRepository_UpdateTest_Call{Call: _e.mock.On("UpdateTest", ctx, testInfoEntity)}
}

func (_c *ITestInfoRepository_UpdateTest_Call) Run(run func(ctx context.Context, testInfoEntity *entity.TestInfoEntity)) *ITestInfoRepository_UpdateTest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.TestInfoEntity))
	})
	return _c
}

func (_c *ITestInfoRepository_UpdateTest_Call) Return(_a0 error) *ITestInfoRepository_UpdateTest_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateTestStatus provides a mock function with given fields: ctx, testID, testStatus
func (_m *ITestInfoRepository) UpdateTestStatus(ctx context.Context, testID string, testStatus string) error {
	ret := _m.Called(ctx, testID, testStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, testID, testStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ITestInfoRepository_UpdateTestStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTestStatus'
type ITestInfoRepository_UpdateTestStatus_Call struct {
	*mock.Call
}

// UpdateTestStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - testID string
//   - testStatus string
func (_e *ITestInfoRepository_Expecter) UpdateTestStatus(ctx interface{}, testID interface{}, testStatus interface{}) *ITestInfoRepository_UpdateTestStatus_Call {
	return &ITestInfoRepository_UpdateTestStatus_Call{Call: _e.mock.On("UpdateTestStatus", ctx, testID, testStatus)}
}

func (_c *ITestInfoRepository_UpdateTestStatus_Call) Run(run func(ctx context.Context, testID string, testStatus string)) *ITestInfoRepository_UpdateTestStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ITestInfoRepository_UpdateTestStatus_Call) Return(_a0 error) *ITestInfoRepository_UpdateTestStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewITestInfoRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewITestInfoRepository creates a new instance of ITestInfoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewITestInfoRepository(t mockConstructorTestingTNewITestInfoRepository) *ITestInfoRepository {
	mock := &ITestInfoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
